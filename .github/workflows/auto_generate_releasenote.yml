name: Auto Generate Release Notes

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  generate-release-notes:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get and Validate Version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            echo "🏷️ Auto-triggered by release: $VERSION"
          else
            VERSION="${{ github.event.inputs.version }}"
            echo "🖱️ Manual trigger with version: $VERSION"
          fi
          
          # Validate version format
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: v1.2.3 or v1.2.3-alpha.1"
            exit 1
          fi
          
          # Set outputs for subsequent steps
          # 'v' prefix removed for slug_version
          {
            echo "version=$VERSION"
            echo "slug_version=${VERSION#v}"
          } >> "$GITHUB_OUTPUT"
          echo "✅ Version validated: $VERSION"
      
      - name: Prepare release notes directories
        run: |
          mkdir -p docs/releasenote
          
          if [ ! -f "docs/releasenote/index.md" ]; then
            echo "📝 Creating initial index.md"
            cat > docs/releasenote/index.md << 'EOF'
          # Release Notes
          
          ## Version History
          EOF
          fi
      
      - name: Generate release notes with Gemini CLI
        id: generate
        continue-on-error: true
        uses: google-github-actions/run-gemini-cli@v0
        with:
          gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
          prompt: |
            "STEP1 read .gemini/commands/create_github_releasenote.toml
             STEP2 run create_github_releasenote.toml using ${{ steps.version.outputs.slug_version }}"
      
      - name: Debug Gemini CLI output
        run: |
          echo "🔍 Checking Gemini CLI step result..."
          echo "Step outcome: ${{ steps.generate.outcome }}"
          echo "Step conclusion: ${{ steps.generate.conclusion }}"
          
          echo "📁 Listing docs/releasenote/ directory:"
          ls -la docs/releasenote/ || echo "Directory does not exist"
          
          echo "📄 Checking for generated files:"
          find docs/ -name "*.md" -type f 2>/dev/null || echo "No .md files found in docs/"
      
      - name: Validate generated files
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          DETAILED_FILE="docs/releasenote/${VERSION}.md"
          INDEX_FILE="docs/releasenote/index.md"
          
          echo "🔍 Validating generated files..."
          
          # Check if Gemini CLI step succeeded
          if [ "${{ steps.generate.outcome }}" != "success" ]; then
            echo "⚠️  Gemini CLI step failed, creating fallback release notes..."
            
            # Create fallback release notes
            cat > "$DETAILED_FILE" << EOF
          # Release Notes for ${VERSION}
          
          ## What's New
          
          This release was auto-generated. Please update with actual changes.
          
          ## Installation
          
          \`\`\`bash
          npm install mulmocast-cli-yn@${VERSION#v}
          \`\`\`
          
          **Full Changelog**: https://github.com/receptron/mulmocast-cli-yn/compare/...${VERSION}
          EOF
            
            # Update index.md
            if [ -f "$INDEX_FILE" ]; then
              # Add new version to the top of the version history
              sed -i.bak "/## Version History/a\\
          \\
          - [${VERSION}](./${VERSION}.md) - $(date '+%Y-%m-%d')" "$INDEX_FILE"
            fi
          fi
          
          if [ ! -f "$DETAILED_FILE" ]; then
            echo "❌ Detailed release note not found: $DETAILED_FILE"
            exit 1
          else
            FILE_SIZE=$(wc -c < "$DETAILED_FILE")
            echo "✅ Detailed release note created: $DETAILED_FILE (Size: $FILE_SIZE bytes)"
          fi
          
          if grep -q "# .*${VERSION}" "$INDEX_FILE"; then
            echo "✅ Version $VERSION found in index"
          else
            echo "❌ Version $VERSION not found in index file. Validation failed."
            exit 1
          fi
      
      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check for changes before proceeding
          if git diff --quiet docs/releasenote/; then
            echo "✅ No changes detected in docs/releasenote. Skipping PR creation."
            exit 0
          fi

          VERSION="${{ steps.version.outputs.version }}"
          BRANCH="release-notes/${{ steps.version.outputs.slug_version }}"
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git checkout -b "$BRANCH"
          git add docs/releasenote/
          git commit -m "docs: add release notes for $VERSION"
          git push origin "$BRANCH"
          
          echo "🚀 Creating Pull Request..."
          gh pr create \
            --title "📝 Release Notes for $VERSION" \
            --body "This PR was auto-generated by the 'Auto Generate Release Notes' workflow and contains the release notes for version **$VERSION**." \
            --head "$BRANCH" \
            --base "main" \
            --label "documentation" --label "release-notes" --label "auto-generated"
          
          echo "✅ Pull Request created successfully!"
