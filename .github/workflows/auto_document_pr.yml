name: Auto Document PR Changes

on:
  pull_request:
    types: [closed]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.github/**'
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to document'
        required: true
        type: string

jobs:
  document-pr:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get PR Information
        id: pr_info
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            PR_NUMBER="${{ github.event.number }}"
            PR_MERGED="${{ github.event.pull_request.merged }}"
            
            if [ "$PR_MERGED" = "true" ]; then
              echo "✅ Auto-triggered by merged PR: #$PR_NUMBER"
            else
              echo "❌ PR #$PR_NUMBER was closed but not merged. Skipping documentation."
              exit 0
            fi
          else
            PR_NUMBER="${{ github.event.inputs.pr_number }}"
            echo "🖱️ Manual trigger for PR: #$PR_NUMBER"
          fi
          
          echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"
          echo "✅ PR number: $PR_NUMBER"
      
      - name: Prepare documentation directories
        run: |
          mkdir -p docs/pr_analysis
          
          if [ ! -f "docs/pr_analysis/README.md" ]; then
            echo "📝 Creating initial PR analysis README"
            cat > docs/pr_analysis/README.md << 'EOF'
          # PR Analysis Documentation
          
          This directory contains automated analysis of Pull Requests to help understand code changes and their impact.
          
          ## Files
          - `pr-XXXX.md` - Detailed analysis for PR #XXXX
          EOF
          fi
      
      - name: Generate PR documentation with Gemini CLI
        id: generate
        continue-on-error: true
        uses: google-github-actions/run-gemini-cli@v0
        with:
          gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
          prompt: |
            Please analyze Pull Request #${{ steps.pr_info.outputs.pr_number }} from the mulmocast-cli-yn repository.
            
            Create a detailed analysis file: docs/pr_analysis/pr-${{ steps.pr_info.outputs.pr_number }}.md
            
            Use the WebFetch tool to gather information:
            1. PR discussion page: https://github.com/receptron/mulmocast-cli/pull/${{ steps.pr_info.outputs.pr_number }}
            2. Files changed page: https://github.com/receptron/mulmocast-cli/pull/${{ steps.pr_info.outputs.pr_number }}/files
            
            Create the analysis using this template:
            
            ```markdown
            # PR Analysis #${{ steps.pr_info.outputs.pr_number }}: [PR_TITLE]
            
            **Author**: @[AUTHOR]  
            **Status**: [OPEN/CLOSED/MERGED]  
            **Created**: [DATE]  
            **Repository**: receptron/mulmocast-cli
            
            ## Summary
            [Brief description of what this PR does]
            
            ## Files Changed
            [List of modified files with brief description of changes]
            
            ## Code Analysis
            [Detailed analysis of the code changes based on diff review]
            
            ## Impact Assessment
            - **Breaking Changes**: [Yes/No and details]
            - **New Features**: [List new features added]
            - **Bug Fixes**: [List bugs fixed]
            - **Dependencies**: [Any new dependencies added]
            - **Testing**: [Test coverage and new tests added]
            
            ## English Summary
            [Detailed, factual summary in English based on code changes]
            
            ## 日本語要約
            [Japanese translation of the summary]
            
            ---
            *Generated by Gemini Code Assist on $(date '+%Y-%m-%d %H:%M:%S')*
            ```
      
      - name: Debug Gemini CLI output
        run: |
          echo "🔍 Checking Gemini CLI step result..."
          echo "Step outcome: ${{ steps.generate.outcome }}"
          echo "Step conclusion: ${{ steps.generate.conclusion }}"
          
          echo "📁 Listing docs/pr_analysis/ directory:"
          ls -la docs/pr_analysis/ || echo "Directory does not exist"
          
          echo "📄 Checking for generated files:"
          find docs/pr_analysis/ -name "pr-*.md" -type f 2>/dev/null || echo "No PR analysis files found"
      
      - name: Validate generated files
        run: |
          PR_NUMBER="${{ steps.pr_info.outputs.pr_number }}"
          ANALYSIS_FILE="docs/pr_analysis/pr-${PR_NUMBER}.md"
          
          echo "🔍 Validating generated files..."
          
          # Check if Gemini CLI step succeeded
          if [ "${{ steps.generate.outcome }}" != "success" ]; then
            echo "⚠️  Gemini CLI step failed, creating fallback PR analysis..."
            
            # Create fallback PR analysis
            cat > "$ANALYSIS_FILE" << EOF
          # PR Analysis #${PR_NUMBER}: [Manual Review Required]
          
          **Author**: [Unknown]  
          **Status**: [Unknown]  
          **Created**: $(date '+%Y-%m-%d')  
          **Repository**: receptron/mulmocast-cli-yn
          
          ## Summary
          This PR analysis was auto-generated as a fallback. Please manually review the PR for detailed information.
          
          ## Links
          - **PR Discussion**: https://github.com/receptron/mulmocast-cli/pull/${PR_NUMBER}
          - **Files Changed**: https://github.com/receptron/mulmocast-cli/pull/${PR_NUMBER}/files
          
          ## Manual Review Required
          Please review the above links to understand the changes made in this PR.
          
          ---
          *Auto-generated fallback on $(date '+%Y-%m-%d %H:%M:%S')*
          EOF
          fi
          
          if [ ! -f "$ANALYSIS_FILE" ]; then
            echo "❌ PR analysis file not found: $ANALYSIS_FILE"
            exit 1
          else
            FILE_SIZE=$(wc -c < "$ANALYSIS_FILE")
            echo "✅ PR analysis created: $ANALYSIS_FILE (Size: $FILE_SIZE bytes)"
          fi
      
      - name: Add PR comment
        if: github.event_name == 'pull_request'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER="${{ steps.pr_info.outputs.pr_number }}"
          
          echo "💬 Adding comment to PR #${PR_NUMBER}..."
          
          gh pr comment ${PR_NUMBER} --body "🤖 **Automated PR Analysis Generated**

          I've created a detailed analysis of this PR's changes. You can find it here:
          
          📄 **Analysis File**: \`docs/pr_analysis/pr-${PR_NUMBER}.md\`
          
          This analysis includes:
          - Summary of changes
          - Files modified
          - Impact assessment
          - Code analysis
          
          The analysis will be updated if the PR is modified.
          
          ---
          *Generated by Auto Document PR Changes workflow*"
          
          echo "✅ Comment added successfully!"
      
      - name: Create commit (if files were generated)
        run: |
          # Check for changes before proceeding
          if git diff --quiet docs/pr_analysis/; then
            echo "✅ No changes detected in docs/pr_analysis. Skipping commit."
            exit 0
          fi

          PR_NUMBER="${{ steps.pr_info.outputs.pr_number }}"
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add docs/pr_analysis/
          git commit -m "docs: add automated analysis for PR #${PR_NUMBER}

          🤖 Generated with [Claude Code](https://claude.ai/code)
          
          Co-Authored-By: Claude <noreply@anthropic.com>"
          
          # Only push if we're not in a PR (to avoid conflicts)
          if [ "${{ github.event_name }}" != "pull_request" ]; then
            git push origin main
            echo "✅ Changes committed and pushed to main branch!"
          else
            echo "✅ Changes committed locally (not pushed due to PR context)!"
          fi