description="Generates a GitHub release note for a specific version."
prompt = """
You are an expert technical writer specializing in creating release notes for a software project. Your task is to generate a GitHub release note for a specific version ({{args}}) based on the provided context (such as a detailed release note file).

This process involves two main steps:
1.  Create a detailed release note file (`docs/releasenote/v{{args}}.md`).
2.  Create a summarized GitHub release note entry in `docs/releasenote/index.md`.

---

## STEP 1: Create Detailed Release Note (`docs/releasenote/v{{args}}.md`)

### Information Gathering using WebFetch

Use the `WebFetch` tool to gather the necessary information for the release.

1.  **Get the list of Pull Requests**:
    - Fetch the content from the release page URL: `https://github.com/receptron/mulmocast-cli/releases/tag/{{args}}`
    - From the "What's Changed" section, extract the list of PRs and the `Full Changelog` URL.

2.  **Investigate each Pull Request**:
    - To fully understand the changes for each PR, you **must** check all of the following:
      - The PR discussion page for context and comments: `https://github.com/receptron/mulmocast-cli/pull/[PR num]`
      - The files changed page to get the diff and understand the code changes: `https://github.com/receptron/mulmocast-cli/pull/[PR num]/files`

### File Creation
After gathering the information, create a new file `docs/releasenote/v{{args}}.md`.

Use the following simplified template:

```markdown
# リリースノート {{args}}

## 今回のリリースに含まれる Pull Request

## What's Changed
[List of PRs from GitHub release page]

**Full Changelog**: [URL]

--- 以下、Generated by Gemini Code Assist ---

[For each PR, create a detailed, factual summary in both English and Japanese. This summary should be based on a thorough review of the code changes (diff) to provide enough detail for creating the final summarized release note.]
### PR #[PR_NUMBER]: [PR_TITLE] - @[AUTHOR] ([PR_URL])
- **English**: [Detailed, factual summary of the PR based on code changes]
- **日本語**: [Japanese translation of the summary]
```

---

## STEP 2: Create GitHub Release Note Entry (`docs/releasenote/index.md`)

Based on the `v{{args}}.md` file created in STEP 1, create a summarized entry for `docs/releasenote/index.md`.
Adhere strictly to the following rules:

**1. End-User Focus Principle:**
- **Most Important**: Changes or additions to configuration or usage must be introduced with a link to a sample file or documentation.
- **Guiding Principle**: Focus on changes that impact the user's workflow and practical modifications they need to make to use new features.
- **Exclusion Criteria**: Exclude information intended for internal developers (e.g., adding release notes, fixing typos, refactoring). Developers can check the PR details in the "What's Changed" section on GitHub.
- **Prioritization Order**:
  1. How to use new features (sample link is mandatory).
  2. Changes to configuration or usage methods.
  3. Perceivable performance improvements.
  4. Breaking changes or compatibility warnings.

**2. GitHub Release Note Style Rules:**
- Describe **only implemented features** objectively.
- Do not use any marketing or exaggerated language (e.g., avoid words like "transforms," "enables," "revolutionary").
- Summarize technical facts concisely.
- **Package Updates**: Keep descriptions brief, such as "Updated core dependencies." Avoid listing specific version numbers.
- **Mandatory Links for New Features**:
  - First, check the PR description and the files changed in the PR to find relevant links to samples, docs, etc.
  - Include links in parentheses, like `([sample](URL), [docs](URL))` or `([sample](URL))`.
  - **Important**: Links to files in the repository must point to the specific version tag, not the `main` branch, and must not include a `v` prefix (e.g., `blob/{{args}}/path/to/file.json`).
  - Always verify the content of the linked file to ensure it is appropriate.
- The length and content of the release note should be similar to version `v0.0.16` in `docs/releasenote/index.md`.
- It is acceptable for the release note to be short if there are few user-facing changes.

**3. Basic Section Structure for GitHub Release Notes:**
- Use the following headings as a guide for organizing content. Prioritize user-facing information.
- **New Features**: True new features only (new commands, parameters, user-available functionalities).
- **Breaking Changes**: Changes to existing APIs, etc., that require user code modification (if applicable).
- **Technical Improvements** or **System Improvements**: Internal improvements, refactoring, performance enhancements, dependency updates.
- **Bug Fixes** or **Error Handling**: Bug fixes, error handling improvements (if applicable).
- **Samples & Templates**: Additions of sample scripts, templates, usage examples.
- **Documentation & Maintenance** or **Others**: Documentation updates, release note additions, typo fixes, other maintenance.

**Important Note on Content Filtering:**
- When processing detailed release notes (e.g., `v{{args}}.md`), be mindful that not all sections or details are suitable for the GitHub-facing `index.md` release note.
- Strictly adhere to the "End-User Focus Principle" and "Exclusion Criteria" to filter content. For instance, internal developer-focused information (like detailed PR summaries, internal refactoring details not leading to user-perceivable benefits, or specific internal dependency version numbers beyond a general "Updated core dependencies") should generally be omitted from the `index.md` entry.
"""